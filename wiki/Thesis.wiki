#summary Thesis weblog

= Thesis work on Vocabuilder =

I'm doing several improvements on Vocabuilder as part of my final Thesis work at Haaga-Helia.

Here you can find a short list of what is planned, the progress and an account of the time spent per task.

  * Fix a performance Issue on the RMS subsystem (issue 3)
  	* week 15: 30h
  		* Modify the internal file format improving flexibility and performance (issue 5)
  	* week 16: 30h 
  		* Create a new model for the storage (m2), updating single records
  	* week 17: 35h 
  		* Create a new model for the storage (m3), saving the whole list in a single record
  	* week 18: 30h 
  		* Create Unit tests, fix bugs and validate the performance
  	* week 19: 15h 
  		* Fix bugs and validate the performance in the test hand set (Nokia E50)
  		* Update the web site and create this page
  	* week 20: 10h 
  		* Create a beta version with m3 as storage mechanism
  		* Create unit tests and fix bugs
  		* Improve the user interface
  			# The 'statistics' page should have an 'exit' button
 
  * Include support for multiple lists of words (read / delete). Should be possible to load for study or delete permanently any of the lists available in the handset, but the default. This should fix issue 7. 
  	* week 21: 5h
  	* week 22: 11h
  		* Use the list name as the recordStore name
  		* Correct the unit test cases
  		* Reorganize the DAO layer with the use of a interface and a abstract class
  	* week 23: 13h
  		* Change the UI to allow the selection and loading of any available list
  		* Reorganize the controller class
  	* week 24: 20h
  		* Fix the RecordStoreFactory to support multiple store names
  		* Method for deleting a recordstore
  		* Fix the test cases
  		* Allow loading a new list without quit the application
  		* Screen for deleting lists
  		* User preferences VO
        * week 25: 7h
  		* Divide the long lists in smaller ones (made using a groovy script)
	
	* week 25: 16h
        * Fix the file splitter groovy script
        * Fix the test cases to use a special test file
        * Remove unused Unit Test library. The sources are used instead
        * Add obfuscation using ProGuard in order to produce smaller jar files
  		
  		
  	* TODO	
                * Package the application using obfuscation, to diminish the JAR size
                * Include support for Antenna in the project so it can built with ANT
                * Create the basic framework for localizing the application UI
                * Allow the delete/restore of the default sets (they should be hidden)
                * Support for UTF8
  		* Show least viewed cards first
  		* Make the file name and the SET name independent so nicer names can appear in the UI
  		* Implement the [http://learnsuomea.blogspot.com/2007/05/leitner-system.html Leitner system] for reviewing already know cards
  		* Recompile the demo applications with the lists divided in smaller ones (will break backward compatibility)
  	
  * Create 'preferences' for the application
  	# Show words in random or sequential order
  	# Show first side 1 or side 2 of the card
  * Create a website where the user can create his own lists of words
  	# The lists can be private or public
  	# Let the user load his own lists and public lists via HTTP to the mobile
   * Write a thesis document (min 25 pages)